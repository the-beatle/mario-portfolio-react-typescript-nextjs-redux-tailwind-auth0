import type {AppState, AppThunk} from '../app/store'

export async function fetchContact(email = "marcae7@gmail.com", message = "hello world"): Promise<{ data: any }> {
    const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({email, message}),
    })
    const result = await response.json()
    return result
}

import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'


export interface contactState {
    data: any
    error: string
    loading: boolean
}

const initialState: contactState = {
    data: null,
    error: "",
    loading: false
}

export const sendMessage = createAsyncThunk(
    'contact/fetchContact',
    async (data: any) => {
        const response = await fetchContact(data.email, data.message)
        // The value we return becomes the `fulfilled` action payload
        return response
    }
)

export const contactSlice = createSlice({
    name: 'contact',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        clearState: (state) => initialState,
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(sendMessage.pending, (state) => {
                state.loading = true
            })
            .addCase(sendMessage.fulfilled, (state, action) => {
                state.data = action.payload
                state.loading = false
            })
            .addCase(sendMessage.rejected, (state, {error}) => {
                state.error = 'error'
            })
    },
})

export const {clearState} = contactSlice.actions

export default contactSlice.reducer